// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace WebApplication1.Models;

public partial class CINE_2025_1W1_GRUPO_5Context : DbContext
{
    public CINE_2025_1W1_GRUPO_5Context(DbContextOptions<CINE_2025_1W1_GRUPO_5Context> options)
        : base(options)
    {
    }

    public virtual DbSet<Actor> Actores { get; set; }

    public virtual DbSet<Barrio> Barrios { get; set; }

    public virtual DbSet<Butaca> Butacas { get; set; }

    public virtual DbSet<ButacasFuncion> ButacasFuncions { get; set; }

    public virtual DbSet<Cargo> Cargos { get; set; }

    public virtual DbSet<Cine> Cines { get; set; }

    public virtual DbSet<ClasificacionesPelicula> ClasificacionesPeliculas { get; set; }

    public virtual DbSet<Cliente> Clientes { get; set; }

    public virtual DbSet<Compra> Compras { get; set; }

    public virtual DbSet<Descuento> Descuentos { get; set; }

    public virtual DbSet<DetalleReserva> DetalleReservas { get; set; }

    public virtual DbSet<DetallesCompra> DetallesCompras { get; set; }

    public virtual DbSet<Direccion> Direcciones { get; set; }

    public virtual DbSet<Director> Directores { get; set; }

    public virtual DbSet<Distribuidora> Distribuidoras { get; set; }

    public virtual DbSet<Empleado> Empleados { get; set; }

    public virtual DbSet<EstadoButaca> EstadoButacas { get; set; }

    public virtual DbSet<EstadoReserva> EstadoReservas { get; set; }

    public virtual DbSet<FechasEspecial> FechasEspeciales { get; set; }

    public virtual DbSet<FechasHorasEspecial> FechasHorasEspeciales { get; set; }

    public virtual DbSet<FormasPago> FormasPagos { get; set; }

    public virtual DbSet<Funcion> Funciones { get; set; }

    public virtual DbSet<Genero> Generos { get; set; }

    public virtual DbSet<Idioma> Idiomas { get; set; }

    public virtual DbSet<Localidad> Localidades { get; set; }

    public virtual DbSet<Pais> Paises { get; set; }

    public virtual DbSet<Pelicula> Peliculas { get; set; }

    public virtual DbSet<PeliculasActor> PeliculasActores { get; set; }

    public virtual DbSet<PeliculasDirector> PeliculasDirectores { get; set; }

    public virtual DbSet<PeliculasGenero> PeliculasGeneros { get; set; }

    public virtual DbSet<PeliculasIdioma> PeliculasIdiomas { get; set; }

    public virtual DbSet<Producto> Productos { get; set; }

    public virtual DbSet<Provincia> Provincias { get; set; }

    public virtual DbSet<PuntosVentum> PuntosVenta { get; set; }

    public virtual DbSet<Reserva> Reservas { get; set; }

    public virtual DbSet<Sala> Salas { get; set; }

    public virtual DbSet<TiposButaca> TiposButacas { get; set; }

    public virtual DbSet<TiposDescuento> TiposDescuentos { get; set; }

    public virtual DbSet<TiposProducto> TiposProductos { get; set; }

    public virtual DbSet<TiposPublico> TiposPublicos { get; set; }

    public virtual DbSet<TiposSala> TiposSalas { get; set; }

    public virtual DbSet<TiposUsuario> TiposUsuarios { get; set; }

    public virtual DbSet<Usuario> Usuarios { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Actor>(entity =>
        {
            entity.HasKey(e => e.IdActor);

            entity.ToTable("actores");

            entity.Property(e => e.IdActor).HasColumnName("id_actor");
            entity.Property(e => e.Apellido)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("apellido");
            entity.Property(e => e.IdPais).HasColumnName("id_pais");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("nombre");

            entity.HasOne(d => d.IdPaisNavigation).WithMany(p => p.Actores)
                .HasForeignKey(d => d.IdPais)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_actores_paises");
        });

        modelBuilder.Entity<Barrio>(entity =>
        {
            entity.HasKey(e => e.IdBarrio);

            entity.ToTable("barrios");

            entity.Property(e => e.IdBarrio).HasColumnName("id_barrio");
            entity.Property(e => e.IdLocalidad).HasColumnName("id_localidad");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("nombre");

            entity.HasOne(d => d.IdLocalidadNavigation).WithMany(p => p.Barrios)
                .HasForeignKey(d => d.IdLocalidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_barrios_localidades");
        });

        modelBuilder.Entity<Butaca>(entity =>
        {
            entity.HasKey(e => e.IdButaca);

            entity.ToTable("butacas");

            entity.Property(e => e.IdButaca).HasColumnName("id_butaca");
            entity.Property(e => e.Fila)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("fila");
            entity.Property(e => e.IdSala).HasColumnName("id_sala");
            entity.Property(e => e.IdTipoButaca).HasColumnName("id_tipo_butaca");
            entity.Property(e => e.NumeroButaca).HasColumnName("numero_butaca");

            entity.HasOne(d => d.IdSalaNavigation).WithMany(p => p.Butacas)
                .HasForeignKey(d => d.IdSala)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_butacas_salas");

            entity.HasOne(d => d.IdTipoButacaNavigation).WithMany(p => p.Butacas)
                .HasForeignKey(d => d.IdTipoButaca)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_butacas_tipos_butacas");
        });

        modelBuilder.Entity<ButacasFuncion>(entity =>
        {
            entity.HasKey(e => e.IdButacaFuncion);

            entity.ToTable("butacas_funcion");

            entity.Property(e => e.IdButacaFuncion).HasColumnName("id_butaca_funcion");
            entity.Property(e => e.IdButaca).HasColumnName("id_butaca");
            entity.Property(e => e.IdCompra).HasColumnName("id_compra");
            entity.Property(e => e.IdEstadoButaca).HasColumnName("id_estado_butaca");
            entity.Property(e => e.IdFuncion).HasColumnName("id_funcion");
            entity.Property(e => e.IdReserva).HasColumnName("id_reserva");

            entity.HasOne(d => d.IdButacaNavigation).WithMany(p => p.ButacasFuncions)
                .HasForeignKey(d => d.IdButaca)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_butacas_funcion_butacas");

            entity.HasOne(d => d.IdEstadoButacaNavigation).WithMany(p => p.ButacasFuncions)
                .HasForeignKey(d => d.IdEstadoButaca)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_butacas_funcion_estado");

            entity.HasOne(d => d.IdFuncionNavigation).WithMany(p => p.ButacasFuncions)
                .HasForeignKey(d => d.IdFuncion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_butacas_funcion_funciones");
        });

        modelBuilder.Entity<Cargo>(entity =>
        {
            entity.HasKey(e => e.IdCargo);

            entity.ToTable("cargos");

            entity.Property(e => e.IdCargo).HasColumnName("id_cargo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<Cine>(entity =>
        {
            entity.HasKey(e => e.IdCine);

            entity.ToTable("cines");

            entity.Property(e => e.IdCine).HasColumnName("id_cine");
            entity.Property(e => e.IdDireccion).HasColumnName("id_direccion");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("nombre");
            entity.Property(e => e.Telefono)
                .HasMaxLength(30)
                .HasColumnName("telefono");

            entity.HasOne(d => d.IdDireccionNavigation).WithMany(p => p.Cines)
                .HasForeignKey(d => d.IdDireccion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_cines_direcciones");
        });

        modelBuilder.Entity<ClasificacionesPelicula>(entity =>
        {
            entity.HasKey(e => e.IdClasificacion);

            entity.ToTable("clasificaciones_peliculas");

            entity.Property(e => e.IdClasificacion).HasColumnName("id_clasificacion");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .HasColumnName("descripcion");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<Cliente>(entity =>
        {
            entity.HasKey(e => e.IdCliente);

            entity.ToTable("clientes");

            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.Apellido)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("apellido");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.FechaNacimiento).HasColumnName("fecha_nacimiento");
            entity.Property(e => e.IdDireccion).HasColumnName("id_direccion");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("nombre");
            entity.Property(e => e.Telefono)
                .HasMaxLength(30)
                .HasColumnName("telefono");

            entity.HasOne(d => d.IdDireccionNavigation).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.IdDireccion)
                .HasConstraintName("FK_clientes_direcciones");
        });

        modelBuilder.Entity<Compra>(entity =>
        {
            entity.HasKey(e => e.IdCompra);

            entity.ToTable("compras");

            entity.Property(e => e.IdCompra).HasColumnName("id_compra");
            entity.Property(e => e.Estado)
                .HasMaxLength(50)
                .HasColumnName("estado");
            entity.Property(e => e.FechaCompra)
                .HasColumnType("datetime")
                .HasColumnName("fecha_compra");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdFormaPago).HasColumnName("id_forma_pago");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.Compras)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_compras_clientes");

            entity.HasOne(d => d.IdFormaPagoNavigation).WithMany(p => p.Compras)
                .HasForeignKey(d => d.IdFormaPago)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_compras_formas_pago");
        });

        modelBuilder.Entity<Descuento>(entity =>
        {
            entity.HasKey(e => e.IdDescuento);

            entity.ToTable("descuentos");

            entity.Property(e => e.IdDescuento).HasColumnName("id_descuento");
            entity.Property(e => e.Activo).HasColumnName("activo");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .HasColumnName("descripcion");
            entity.Property(e => e.FechaFin).HasColumnName("fecha_fin");
            entity.Property(e => e.FechaInicio).HasColumnName("fecha_inicio");
            entity.Property(e => e.IdTipoDescuento).HasColumnName("id_tipo_descuento");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("nombre");
            entity.Property(e => e.Valor)
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("valor");

            entity.HasOne(d => d.IdTipoDescuentoNavigation).WithMany(p => p.Descuentos)
                .HasForeignKey(d => d.IdTipoDescuento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_descuentos_tipos");
        });

        modelBuilder.Entity<DetalleReserva>(entity =>
        {
            entity.HasKey(e => e.IdDetalleReserva);

            entity.ToTable("detalle_reservas");

            entity.Property(e => e.IdDetalleReserva).HasColumnName("id_detalle_reserva");
            entity.Property(e => e.IdButaca).HasColumnName("id_butaca");
            entity.Property(e => e.IdFuncion).HasColumnName("id_funcion");
            entity.Property(e => e.IdReserva).HasColumnName("id_reserva");

            entity.HasOne(d => d.IdButacaNavigation).WithMany(p => p.DetalleReservas)
                .HasForeignKey(d => d.IdButaca)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_detalle_reservas_butacas");

            entity.HasOne(d => d.IdFuncionNavigation).WithMany(p => p.DetalleReservas)
                .HasForeignKey(d => d.IdFuncion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_detalle_reservas_funciones");

            entity.HasOne(d => d.IdReservaNavigation).WithMany(p => p.DetalleReservas)
                .HasForeignKey(d => d.IdReserva)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_detalle_reservas_reservas");
        });

        modelBuilder.Entity<DetallesCompra>(entity =>
        {
            entity.HasKey(e => e.IdDetalleCompra);

            entity.ToTable("detalles_compra");

            entity.Property(e => e.IdDetalleCompra).HasColumnName("id_detalle_compra");
            entity.Property(e => e.Cantidad).HasColumnName("cantidad");
            entity.Property(e => e.IdButacaFuncion).HasColumnName("id_butaca_funcion");
            entity.Property(e => e.IdCompra).HasColumnName("id_compra");
            entity.Property(e => e.IdFuncion).HasColumnName("id_funcion");
            entity.Property(e => e.IdProducto).HasColumnName("id_producto");
            entity.Property(e => e.PrecioUnitario)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("precio_unitario");

            entity.HasOne(d => d.IdButacaFuncionNavigation).WithMany(p => p.DetallesCompras)
                .HasForeignKey(d => d.IdButacaFuncion)
                .HasConstraintName("FK_detalles_compra_butacas_funcion");

            entity.HasOne(d => d.IdCompraNavigation).WithMany(p => p.DetallesCompras)
                .HasForeignKey(d => d.IdCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_detalles_compra_compras");

            entity.HasOne(d => d.IdFuncionNavigation).WithMany(p => p.DetallesCompras)
                .HasForeignKey(d => d.IdFuncion)
                .HasConstraintName("FK_detalles_compra_funciones");

            entity.HasOne(d => d.IdProductoNavigation).WithMany(p => p.DetallesCompras)
                .HasForeignKey(d => d.IdProducto)
                .HasConstraintName("FK_detalles_compra_productos");
        });

        modelBuilder.Entity<Direccion>(entity =>
        {
            entity.HasKey(e => e.IdDireccion);

            entity.ToTable("direcciones");

            entity.Property(e => e.IdDireccion).HasColumnName("id_direccion");
            entity.Property(e => e.Calle)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("calle");
            entity.Property(e => e.IdBarrio).HasColumnName("id_barrio");
            entity.Property(e => e.Numero)
                .HasMaxLength(10)
                .HasColumnName("numero");
            entity.Property(e => e.Piso)
                .HasMaxLength(10)
                .HasColumnName("piso");

            entity.HasOne(d => d.IdBarrioNavigation).WithMany(p => p.Direcciones)
                .HasForeignKey(d => d.IdBarrio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_direcciones_barrios");
        });

        modelBuilder.Entity<Director>(entity =>
        {
            entity.HasKey(e => e.IdDirector);

            entity.ToTable("directores");

            entity.Property(e => e.IdDirector).HasColumnName("id_director");
            entity.Property(e => e.Apellido)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("apellido");
            entity.Property(e => e.IdPais).HasColumnName("id_pais");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("nombre");

            entity.HasOne(d => d.IdPaisNavigation).WithMany(p => p.Directores)
                .HasForeignKey(d => d.IdPais)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_directores_paises");
        });

        modelBuilder.Entity<Distribuidora>(entity =>
        {
            entity.HasKey(e => e.IdDistribuidora);

            entity.ToTable("distribuidoras");

            entity.Property(e => e.IdDistribuidora).HasColumnName("id_distribuidora");
            entity.Property(e => e.IdPais).HasColumnName("id_pais");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("nombre");

            entity.HasOne(d => d.IdPaisNavigation).WithMany(p => p.Distribuidoras)
                .HasForeignKey(d => d.IdPais)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_distribuidoras_paises");
        });

        modelBuilder.Entity<Empleado>(entity =>
        {
            entity.HasKey(e => e.IdEmpleado);

            entity.ToTable("empleados");

            entity.Property(e => e.IdEmpleado).HasColumnName("id_empleado");
            entity.Property(e => e.Apellido)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("apellido");
            entity.Property(e => e.IdCargo).HasColumnName("id_cargo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("nombre");
            entity.Property(e => e.Usuario)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("usuario");

            entity.HasOne(d => d.IdCargoNavigation).WithMany(p => p.Empleados)
                .HasForeignKey(d => d.IdCargo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_empleados_cargos");
        });

        modelBuilder.Entity<EstadoButaca>(entity =>
        {
            entity.HasKey(e => e.IdEstadoButaca);

            entity.ToTable("estado_butacas");

            entity.Property(e => e.IdEstadoButaca).HasColumnName("id_estado_butaca");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<EstadoReserva>(entity =>
        {
            entity.HasKey(e => e.IdEstadoReserva);

            entity.ToTable("estado_reservas");

            entity.Property(e => e.IdEstadoReserva).HasColumnName("id_estado_reserva");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<FechasEspecial>(entity =>
        {
            entity.HasKey(e => e.IdFechaEspecial);

            entity.ToTable("fechas_especiales");

            entity.Property(e => e.IdFechaEspecial).HasColumnName("id_fecha_especial");
            entity.Property(e => e.Fecha).HasColumnName("fecha");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<FechasHorasEspecial>(entity =>
        {
            entity.HasKey(e => e.IdFechaHoraEspecial);

            entity.ToTable("fechas_horas_especiales");

            entity.Property(e => e.IdFechaHoraEspecial).HasColumnName("id_fecha_hora_especial");
            entity.Property(e => e.Hora).HasColumnName("hora");
            entity.Property(e => e.IdDescuento).HasColumnName("id_descuento");
            entity.Property(e => e.IdFechaEspecial).HasColumnName("id_fecha_especial");
            entity.Property(e => e.IdFuncion).HasColumnName("id_funcion");

            entity.HasOne(d => d.IdDescuentoNavigation).WithMany(p => p.FechasHorasEspeciales)
                .HasForeignKey(d => d.IdDescuento)
                .HasConstraintName("FK_fhe_descuentos");

            entity.HasOne(d => d.IdFechaEspecialNavigation).WithMany(p => p.FechasHorasEspeciales)
                .HasForeignKey(d => d.IdFechaEspecial)
                .HasConstraintName("FK_fhe_fechas_especiales");

            entity.HasOne(d => d.IdFuncionNavigation).WithMany(p => p.FechasHorasEspeciales)
                .HasForeignKey(d => d.IdFuncion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_fhe_funciones");
        });

        modelBuilder.Entity<FormasPago>(entity =>
        {
            entity.HasKey(e => e.IdFormaPago);

            entity.ToTable("formas_pago");

            entity.Property(e => e.IdFormaPago).HasColumnName("id_forma_pago");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<Funcion>(entity =>
        {
            entity.HasKey(e => e.IdFuncion);

            entity.ToTable("funciones");

            entity.Property(e => e.IdFuncion).HasColumnName("id_funcion");
            entity.Property(e => e.FechaHoraInicio)
                .HasColumnType("datetime")
                .HasColumnName("fecha_hora_inicio");
            entity.Property(e => e.IdPelicula).HasColumnName("id_pelicula");
            entity.Property(e => e.IdSala).HasColumnName("id_sala");
            entity.Property(e => e.PrecioBase)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("precio_base");

            entity.HasOne(d => d.IdPeliculaNavigation).WithMany(p => p.Funciones)
                .HasForeignKey(d => d.IdPelicula)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_funciones_peliculas");

            entity.HasOne(d => d.IdSalaNavigation).WithMany(p => p.Funciones)
                .HasForeignKey(d => d.IdSala)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_funciones_salas");
        });

        modelBuilder.Entity<Genero>(entity =>
        {
            entity.HasKey(e => e.IdGenero);

            entity.ToTable("generos");

            entity.Property(e => e.IdGenero).HasColumnName("id_genero");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<Idioma>(entity =>
        {
            entity.HasKey(e => e.IdIdioma);

            entity.ToTable("idiomas");

            entity.Property(e => e.IdIdioma).HasColumnName("id_idioma");
            entity.Property(e => e.Doblado).HasColumnName("doblado");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(80)
                .HasColumnName("nombre");
            entity.Property(e => e.Subtitulado).HasColumnName("subtitulado");
        });

        modelBuilder.Entity<Localidad>(entity =>
        {
            entity.HasKey(e => e.IdLocalidad);

            entity.ToTable("localidades");

            entity.Property(e => e.IdLocalidad).HasColumnName("id_localidad");
            entity.Property(e => e.IdProvincia).HasColumnName("id_provincia");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("nombre");

            entity.HasOne(d => d.IdProvinciaNavigation).WithMany(p => p.Localidades)
                .HasForeignKey(d => d.IdProvincia)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_localidades_provincias");
        });

        modelBuilder.Entity<Pais>(entity =>
        {
            entity.HasKey(e => e.IdPais);

            entity.ToTable("paises");

            entity.Property(e => e.IdPais).HasColumnName("id_pais");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<Pelicula>(entity =>
        {
            entity.HasKey(e => e.IdPelicula);

            entity.ToTable("peliculas");

            entity.Property(e => e.IdPelicula).HasColumnName("id_pelicula");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(300)
                .HasColumnName("descripcion");
            entity.Property(e => e.Duracion).HasColumnName("duracion");
            entity.Property(e => e.FechaEstreno).HasColumnName("fecha_estreno");
            entity.Property(e => e.IdClasificacion).HasColumnName("id_clasificacion");
            entity.Property(e => e.IdDistribuidora).HasColumnName("id_distribuidora");
            entity.Property(e => e.IdPais).HasColumnName("id_pais");
            entity.Property(e => e.IdTipoPublico).HasColumnName("id_tipo_publico");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("nombre");

            entity.HasOne(d => d.IdClasificacionNavigation).WithMany(p => p.Peliculas)
                .HasForeignKey(d => d.IdClasificacion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peliculas_clasificaciones");

            entity.HasOne(d => d.IdDistribuidoraNavigation).WithMany(p => p.Peliculas)
                .HasForeignKey(d => d.IdDistribuidora)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peliculas_distribuidoras");

            entity.HasOne(d => d.IdPaisNavigation).WithMany(p => p.Peliculas)
                .HasForeignKey(d => d.IdPais)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peliculas_paises");

            entity.HasOne(d => d.IdTipoPublicoNavigation).WithMany(p => p.Peliculas)
                .HasForeignKey(d => d.IdTipoPublico)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peliculas_tipos_publico");
        });

        modelBuilder.Entity<PeliculasActor>(entity =>
        {
            entity.HasKey(e => e.IdPeliActor);

            entity.ToTable("peliculas_actores");

            entity.Property(e => e.IdPeliActor).HasColumnName("id_peli_actor");
            entity.Property(e => e.IdActor).HasColumnName("id_actor");
            entity.Property(e => e.IdPelicula).HasColumnName("id_pelicula");

            entity.HasOne(d => d.IdActorNavigation).WithMany(p => p.PeliculasActores)
                .HasForeignKey(d => d.IdActor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peliculas_actores_actores");

            entity.HasOne(d => d.IdPeliculaNavigation).WithMany(p => p.PeliculasActores)
                .HasForeignKey(d => d.IdPelicula)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peliculas_actores_peliculas");
        });

        modelBuilder.Entity<PeliculasDirector>(entity =>
        {
            entity.HasKey(e => e.IdPeliDirector);

            entity.ToTable("peliculas_directores");

            entity.Property(e => e.IdPeliDirector).HasColumnName("id_peli_director");
            entity.Property(e => e.IdDirector).HasColumnName("id_director");
            entity.Property(e => e.IdPelicula).HasColumnName("id_pelicula");

            entity.HasOne(d => d.IdDirectorNavigation).WithMany(p => p.PeliculasDirectores)
                .HasForeignKey(d => d.IdDirector)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peliculas_directores_directores");

            entity.HasOne(d => d.IdPeliculaNavigation).WithMany(p => p.PeliculasDirectores)
                .HasForeignKey(d => d.IdPelicula)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peliculas_directores_peliculas");
        });

        modelBuilder.Entity<PeliculasGenero>(entity =>
        {
            entity.HasKey(e => e.IdPeliGenero);

            entity.ToTable("peliculas_generos");

            entity.Property(e => e.IdPeliGenero).HasColumnName("id_peli_genero");
            entity.Property(e => e.IdGenero).HasColumnName("id_genero");
            entity.Property(e => e.IdPelicula).HasColumnName("id_pelicula");

            entity.HasOne(d => d.IdGeneroNavigation).WithMany(p => p.PeliculasGeneros)
                .HasForeignKey(d => d.IdGenero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peliculas_generos_generos");

            entity.HasOne(d => d.IdPeliculaNavigation).WithMany(p => p.PeliculasGeneros)
                .HasForeignKey(d => d.IdPelicula)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peliculas_generos_peliculas");
        });

        modelBuilder.Entity<PeliculasIdioma>(entity =>
        {
            entity.HasKey(e => e.IdPeliIdioma);

            entity.ToTable("peliculas_idiomas");

            entity.Property(e => e.IdPeliIdioma).HasColumnName("id_peli_idioma");
            entity.Property(e => e.IdIdioma).HasColumnName("id_idioma");
            entity.Property(e => e.IdPelicula).HasColumnName("id_pelicula");

            entity.HasOne(d => d.IdIdiomaNavigation).WithMany(p => p.PeliculasIdiomas)
                .HasForeignKey(d => d.IdIdioma)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peliculas_idiomas_idiomas");

            entity.HasOne(d => d.IdPeliculaNavigation).WithMany(p => p.PeliculasIdiomas)
                .HasForeignKey(d => d.IdPelicula)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_peliculas_idiomas_peliculas");
        });

        modelBuilder.Entity<Producto>(entity =>
        {
            entity.HasKey(e => e.IdProducto);

            entity.ToTable("productos");

            entity.Property(e => e.IdProducto).HasColumnName("id_producto");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .HasColumnName("descripcion");
            entity.Property(e => e.IdTipoProducto).HasColumnName("id_tipo_producto");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("nombre");
            entity.Property(e => e.Precio)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("precio");

            entity.HasOne(d => d.IdTipoProductoNavigation).WithMany(p => p.Productos)
                .HasForeignKey(d => d.IdTipoProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_productos_tipos");
        });

        modelBuilder.Entity<Provincia>(entity =>
        {
            entity.HasKey(e => e.IdProvincia);

            entity.ToTable("provincias");

            entity.Property(e => e.IdProvincia).HasColumnName("id_provincia");
            entity.Property(e => e.IdPais).HasColumnName("id_pais");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("nombre");

            entity.HasOne(d => d.IdPaisNavigation).WithMany(p => p.Provincia)
                .HasForeignKey(d => d.IdPais)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_provincias_paises");
        });

        modelBuilder.Entity<PuntosVentum>(entity =>
        {
            entity.HasKey(e => e.IdPuntoVenta);

            entity.ToTable("puntos_venta");

            entity.Property(e => e.IdPuntoVenta).HasColumnName("id_punto_venta");
            entity.Property(e => e.Activo).HasColumnName("activo");
            entity.Property(e => e.IdDireccion).HasColumnName("id_direccion");
            entity.Property(e => e.Nombre)
                .HasMaxLength(100)
                .HasColumnName("nombre");
            entity.Property(e => e.Tipo)
                .HasMaxLength(50)
                .HasColumnName("tipo");

            entity.HasOne(d => d.IdDireccionNavigation).WithMany(p => p.PuntosVenta)
                .HasForeignKey(d => d.IdDireccion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_puntos_venta_direcciones");
        });

        modelBuilder.Entity<Reserva>(entity =>
        {
            entity.HasKey(e => e.IdReserva);

            entity.ToTable("reservas");

            entity.Property(e => e.IdReserva).HasColumnName("id_reserva");
            entity.Property(e => e.FechaHoraReserva)
                .HasColumnType("datetime")
                .HasColumnName("fecha_hora_reserva");
            entity.Property(e => e.FechaHoraVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("fecha_hora_vencimiento");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdEstadoReserva).HasColumnName("id_estado_reserva");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.Reservas)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_reservas_clientes");

            entity.HasOne(d => d.IdEstadoReservaNavigation).WithMany(p => p.Reservas)
                .HasForeignKey(d => d.IdEstadoReserva)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_reservas_estado");
        });

        modelBuilder.Entity<Sala>(entity =>
        {
            entity.HasKey(e => e.IdSala);

            entity.ToTable("salas");

            entity.Property(e => e.IdSala).HasColumnName("id_sala");
            entity.Property(e => e.Capacidad).HasColumnName("capacidad");
            entity.Property(e => e.IdCine).HasColumnName("id_cine");
            entity.Property(e => e.IdTipoSala).HasColumnName("id_tipo_sala");
            entity.Property(e => e.NumeroSala).HasColumnName("numero_sala");

            entity.HasOne(d => d.IdCineNavigation).WithMany(p => p.Salas)
                .HasForeignKey(d => d.IdCine)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_salas_cines");

            entity.HasOne(d => d.IdTipoSalaNavigation).WithMany(p => p.Salas)
                .HasForeignKey(d => d.IdTipoSala)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_salas_tipos_salas");
        });

        modelBuilder.Entity<TiposButaca>(entity =>
        {
            entity.HasKey(e => e.IdTipoButaca);

            entity.ToTable("tipos_butacas");

            entity.Property(e => e.IdTipoButaca).HasColumnName("id_tipo_butaca");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<TiposDescuento>(entity =>
        {
            entity.HasKey(e => e.IdTipoDescuento);

            entity.ToTable("tipos_descuentos");

            entity.Property(e => e.IdTipoDescuento).HasColumnName("id_tipo_descuento");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<TiposProducto>(entity =>
        {
            entity.HasKey(e => e.IdTipoProducto);

            entity.ToTable("tipos_productos");

            entity.Property(e => e.IdTipoProducto).HasColumnName("id_tipo_producto");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<TiposPublico>(entity =>
        {
            entity.HasKey(e => e.IdTipoPublico);

            entity.ToTable("tipos_publico");

            entity.Property(e => e.IdTipoPublico).HasColumnName("id_tipo_publico");
            entity.Property(e => e.EdadMaxima).HasColumnName("edad_maxima");
            entity.Property(e => e.EdadMinima).HasColumnName("edad_minima");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<TiposSala>(entity =>
        {
            entity.HasKey(e => e.IdTipoSala);

            entity.ToTable("tipos_salas");

            entity.Property(e => e.IdTipoSala).HasColumnName("id_tipo_sala");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .HasColumnName("descripcion");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<TiposUsuario>(entity =>
        {
            entity.HasKey(e => e.IdTipoUsuario);

            entity.ToTable("tipos_usuarios");

            entity.Property(e => e.IdTipoUsuario).HasColumnName("id_tipo_usuario");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .HasColumnName("descripcion");
            entity.Property(e => e.TipoUsuario)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("tipo_usuario");
        });

        modelBuilder.Entity<Usuario>(entity =>
        {
            entity.HasKey(e => e.IdUsuario);

            entity.ToTable("usuarios");

            entity.HasIndex(e => e.Username, "UQ__usuarios__F3DBC5725BA544E9").IsUnique();

            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.Activo)
                .HasDefaultValue(true)
                .HasColumnName("activo");
            entity.Property(e => e.Apellido)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("apellido");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdEmpleado).HasColumnName("id_empleado");
            entity.Property(e => e.IdTipoUsuario).HasColumnName("id_tipo_usuario");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("nombre");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("password");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("username");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.Usuarios)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_usuarios_clientes");

            entity.HasOne(d => d.IdEmpleadoNavigation).WithMany(p => p.Usuarios)
                .HasForeignKey(d => d.IdEmpleado)
                .HasConstraintName("FK_usuarios_empleados");

            entity.HasOne(d => d.IdTipoUsuarioNavigation).WithMany(p => p.Usuarios)
                .HasForeignKey(d => d.IdTipoUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_usuarios_tipos");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}